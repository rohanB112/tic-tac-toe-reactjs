{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMsg","setWinMsg","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAceA,EAXF,SAAC,GACN,OADiB,EAAVC,MAEH,IAAK,SACD,OAAQ,cAAC,IAAD,CAAaC,UAAU,SACnC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,W,+DCAlCC,G,YAAY,IAAIC,MAAM,GAAGC,KAAK,UA+GrBC,EA7GH,WAEV,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KA2DMC,EAAa,SAACC,GAClB,OAAGH,EACMI,YAAMJ,EAAQ,CAACK,KAAM,YAEI,UAA1BZ,EAAUU,GAITC,YAAM,kBAAmB,CAACC,KAAM,WAHvCZ,EAAUU,GAAcL,EAAU,QAAS,SAC3CC,GAAYD,QAxDO,UAAjBL,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE7BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEU,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE7BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEQ,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE7BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEQ,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEQ,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEQ,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEQ,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,UAEQ,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IAE3BQ,EAAU,GAAD,OAAIR,EAAU,GAAd,aAiBX,OACE,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACE,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UACGQ,EACC,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,0CAAd,SACGQ,IAEH,cAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAhFjB,WACjBd,GAAW,GACXE,EAAU,IACVR,EAAUE,KAAK,UA6EL,gCAKA,qBAAIH,UAAU,6BAAd,UACGM,EAAU,QAAU,SADvB,cAIJ,qBAAKN,UAAU,OAAf,SACKC,EAAUqB,KAAI,SAACC,EAAMC,GAAP,OACX,cAACC,EAAA,EAAD,CAAMJ,QAAU,WAAOX,EAAWc,IAAlC,SACE,cAACE,EAAA,EAAD,CAAU1B,UAAU,MAApB,SACE,cAAC,EAAD,CAAMD,KAAMwB,sBClGnBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a39503c4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {FaTimes, FaRegCircle, FaPen} from \"react-icons/fa\";\r\n\r\nconst Icon = ({name}) => {\r\n        switch (name) {\r\n            case \"circle\":\r\n                return (<FaRegCircle className=\"icon\" />);\r\n            case \"cross\":\r\n                return <FaTimes className=\"icon\" />\r\n            default:\r\n                return <FaPen className=\"icon\" />\r\n        }\r\n}\r\n\r\nexport default Icon;","import React, {useState} from 'react';\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody, Button, Row, Col, Container} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMsg, setWinMsg] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMsg(\"\");\n    itemArray.fill(\"empty\");\n  }\n\n  const checkIsWinner = () => {\n    if( itemArray[0] !== \"empty\" &&\n        itemArray[0] === itemArray[1] &&\n        itemArray[1] === itemArray[2]\n    ){\n      setWinMsg(`${itemArray[0]} wins`);\n    } else if(\n        itemArray[3] !== \"empty\" &&\n        itemArray[3] === itemArray[4] &&\n        itemArray[4] === itemArray[5]\n    ){\n      setWinMsg(`${itemArray[3]} wins`);\n    } else if(\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n  ){\n    setWinMsg(`${itemArray[6]} wins`);\n  } else if(\n    itemArray[0] !== \"empty\" &&\n    itemArray[0] === itemArray[3] &&\n    itemArray[3] === itemArray[6]\n  ){\n    setWinMsg(`${itemArray[0]} wins`);\n  } else if(\n    itemArray[1] !== \"empty\" &&\n    itemArray[1] === itemArray[4] &&\n    itemArray[4] === itemArray[7]\n  ){\n    setWinMsg(`${itemArray[1]} wins`);\n  } else if(\n    itemArray[2] !== \"empty\" &&\n    itemArray[2] === itemArray[5] &&\n    itemArray[5] === itemArray[8]\n  ){\n    setWinMsg(`${itemArray[2]} wins`);\n  } else if(\n    itemArray[0] !== \"empty\" &&\n    itemArray[0] === itemArray[4] &&\n    itemArray[4] === itemArray[8]\n  ){\n    setWinMsg(`${itemArray[0]} wins`);\n  } else if(\n    itemArray[2] !== \"empty\" &&\n    itemArray[2] === itemArray[4] &&\n    itemArray[4] === itemArray[6]\n  ){\n    setWinMsg(`${itemArray[2]} wins`);\n  }\n  }\n\n  const changeItem = (itemNumber) => {\n    if(winMsg){\n      return toast(winMsg, {type: \"success\"});\n    }\n    else if(itemArray[itemNumber] === \"empty\"){\n      itemArray[itemNumber] = isCross ? \"cross\": \"circle\";\n      setIsCross(!isCross);\n    } else{\n      return toast(\"Already filled!\", {type: \"error\"});\n    }\n    checkIsWinner();\n  }\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={4} className=\"offset-md-4\">\n          {winMsg ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-success text-centre text-uppercase\">\n                {winMsg}\n              </h1>\n              <Button color=\"success\" onClick={reloadGame}>\n                  Reload The Game\n              </Button>\n            </div>\n          ) : (\n              <h1 className=\"text-centre text-uppercase\">\n                {isCross ? \"Cross\" : \"Circle\"}'s turn.\n              </h1>\n          )}\n          <div className='grid'>\n              {itemArray.map((item, index) => (\n                  <Card onClick={ () => {changeItem(index)}}>\n                    <CardBody className=\"box\">\n                      <Icon name={item}/>\n                    </CardBody>\n                  </Card>\n              ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}